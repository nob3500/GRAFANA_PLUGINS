import { Observable } from 'rxjs';
interface ObservableTester<T> {
    observable: Observable<T>;
    done: {
        (...args: any[]): any;
        fail(error?: string | {
            message: string;
        }): any;
    };
}
interface SubscribeAndExpectOnNext<T> extends ObservableTester<T> {
    expect: (value: T) => void;
}
interface SubscribeAndExpectOnNextAndComplete<T> extends ObservableTester<T> {
    expectOnNext: (value: T) => void;
    expectOnComplete: () => void;
}
interface SubscribeAndExpectOnComplete<T> extends ObservableTester<T> {
    expect: () => void;
}
interface SubscribeAndExpectOnError<T> extends ObservableTester<T> {
    expect: (err: any) => void;
}
export declare const observableTester: () => {
    subscribeAndExpectOnNext: <T>({ observable, expect, done }: SubscribeAndExpectOnNext<T>) => void;
    subscribeAndExpectOnComplete: <T_1>({ observable, expect, done }: SubscribeAndExpectOnComplete<T_1>) => void;
    subscribeAndExpectOnNextAndComplete: <T_2>({ observable, expectOnComplete, expectOnNext, done, }: SubscribeAndExpectOnNextAndComplete<T_2>) => void;
    subscribeAndExpectOnError: <T_3>({ observable, expect, done }: SubscribeAndExpectOnError<T_3>) => void;
};
export {};
