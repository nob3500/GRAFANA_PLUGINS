import React from 'react';
import uPlot from 'uplot';
import { PlotPlugin } from './types';
import { DataFrame, Field, FieldConfig } from '@grafana/data';
interface PlotCanvasContextType {
    width: number;
    height: number;
    plot: {
        width: number;
        height: number;
        top: number;
        left: number;
    };
}
interface PlotConfigContextType {
    addSeries: (series: uPlot.Series) => {
        removeSeries: () => void;
        updateSeries: () => void;
    };
    addScale: (scaleKey: string, scale: uPlot.Scale) => {
        removeScale: () => void;
        updateScale: () => void;
    };
    addAxis: (axis: uPlot.Axis) => {
        removeAxis: () => void;
        updateAxis: () => void;
    };
}
interface PlotPluginsContextType {
    registerPlugin: (plugin: PlotPlugin) => () => void;
}
interface PlotContextType extends PlotConfigContextType, PlotPluginsContextType {
    isPlotReady: boolean;
    getPlotInstance: () => uPlot;
    getSeries: () => uPlot.Series[];
    getCanvas: () => PlotCanvasContextType;
    canvasRef: any;
    data: DataFrame;
}
export declare const PlotContext: React.Context<PlotContextType>;
export declare const usePlotContext: () => PlotContextType;
export declare const usePlotPluginContext: () => PlotPluginsContextType;
export declare const usePlotConfigContext: () => PlotConfigContextType;
interface PlotDataAPI {
    /** Data frame passed to graph, x-axis aligned */
    data: DataFrame;
    /** Returns field by index */
    getField: (idx: number) => Field;
    /** Returns x-axis fields */
    getXAxisFields: () => Field[];
    /** Returns x-axis fields */
    getYAxisFields: () => Field[];
    /** Returns field value by field and value index */
    getFieldValue: (fieldIdx: number, rowIdx: number) => any;
    /** Returns field config by field index */
    getFieldConfig: (fieldIdx: number) => FieldConfig;
}
export declare const usePlotData: () => PlotDataAPI;
export declare const buildPlotContext: (isPlotReady: boolean, canvasRef: any, data: DataFrame, registerPlugin: any, addSeries: any, addAxis: any, addScale: any, getPlotInstance: () => uPlot) => PlotContextType;
export {};
