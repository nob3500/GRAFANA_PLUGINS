import { PlotPlugin } from './types';
import uPlot from 'uplot';
import { TimeZone } from '@grafana/data';
export declare const usePlotPlugins: () => {
    arePluginsReady: boolean;
    plugins: Record<string, PlotPlugin>;
    registerPlugin: (plugin: PlotPlugin) => () => void;
};
export declare const DEFAULT_PLOT_CONFIG: {
    focus: {
        alpha: number;
    };
    cursor: {
        focus: {
            prox: number;
        };
    };
    legend: {
        show: boolean;
    };
    hooks: {};
};
export declare const usePlotConfig: (width: number, height: number, timeZone: TimeZone) => {
    addSeries: (s: uPlot.Series) => {
        removeSeries: () => void;
        updateSeries: (config: uPlot.Series) => void;
    };
    addAxis: (a: uPlot.Axis) => {
        removeAxis: () => void;
        updateAxis: (config: uPlot.Axis) => void;
    };
    addScale: (scaleKey: string, s: uPlot.Scale) => {
        removeScale: () => void;
        updateScale: (config: uPlot.Scale) => void;
    };
    registerPlugin: (plugin: PlotPlugin) => () => void;
    currentConfig: uPlot.Options | undefined;
};
/**
 * Forces re-render of a component when uPlots's draw hook is fired.
 * This hook is usefull in scenarios when you want to reposition XYCanvas elements when i.e. plot size changes
 * @param pluginId - id under which the plugin will be registered
 */
export declare const useRefreshAfterGraphRendered: (pluginId: string) => number;
